/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    id 'java-library'
    id 'com.microsoft.identity.buildsystem' version '0.2.3'
    id 'maven-publish'

    // the below build plugin allows to generate BuildConfig files in a JAVA gradle project.
    // BuildConfig files are generated by default in an Android project, however, a non-Android java
    // module doesn't really have a concept of BuildConfig. This plugin allows us to create similar
    // looking BuildConfig constants in a java project.
    id 'com.github.gmazzo.buildconfig' version '3.0.0'

    // Test fixtures are commonly used to setup the code under test,
    // or provide utilities aimed at facilitating the tests of a component.
    // This will automatically create a testFixtures source set, in which you can write your test fixtures.
    id "java-test-fixtures"

    // This is needed to get Android Studio to resolve test fixtures dependencies
    id 'idea'

    // Add kotlin support
    id 'org.jetbrains.kotlin.jvm'
}

def desugarCode = false

if (project.hasProperty("sugar")) {
    desugarCode = sugar.toBoolean()
}

buildSystem {
    desugar = desugarCode
}

def enableCodeCoverage = false

if (project.hasProperty("codeCoverageEnabled")) {
    enableCodeCoverage = codeCoverageEnabled.toBoolean()
}

codeCoverageReport {
    coverage.enabled = enableCodeCoverage
}

repositories {
    mavenCentral()
}

apply from: './versioning/version_tasks.gradle'

project.ext.vstsUsername = System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME") != null ? System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME") : project.findProperty("vstsUsername")
project.ext.vstsPassword = System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN") != null ? System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN") : project.findProperty("vstsMavenAccessToken")

version = getAppVersionName()

//task sourcesJar(type: Jar) {
//    from sourceSets.main.java.srcDirs
//    classifier 'sources'
//    destinationDirectory = reporting.file("$project.buildDir/outputs/jars")
//}
//
//// Task to generate javadoc
//task generateJavadoc(type: Javadoc) {
//    failOnError false
//    title = "Microsoft Identity Common Java"
//    source = sourceSets.main.java
//    classpath += project.sourceSets.main.compileClasspath
//
//    options.memberLevel = JavadocMemberLevel.PUBLIC
//    options.addBooleanOption('Xdoclint:none', true)
//
//    exclude '**/BuildConfig.Java'
//    exclude '**/R.java'
//    destinationDir = reporting.file("$project.buildDir/outputs/javadoc")
//}
//
//// Task to generate javadoc.jar
//task javadocJar(type: Jar, dependsOn: generateJavadoc) {
//    from javadoc.destinationDir
//    classifier 'javadoc'
//    destinationDirectory = reporting.file("$project.buildDir/outputs/jars")
//}
//
//jar {
//    manifest {
//        attributes('Implementation-Title': project.name,
//                'Implementation-Version': project.version)
//    }
//}
//
//publishing {
//    publications {
//        aar(MavenPublication) {
//            groupId 'com.microsoft.identity'
//            artifactId 'common4j'
//            from components.java
//
//            pom {
//                name = 'common4j'
//                description = 'This library contains common java code shared between the Active Directory ' +
//                        'Authentication Library (ADAL) for Android and the Microsoft ' +
//                        'Authentication Library (MSAL) for Android. This library ' +
//                        'includes only internal classes and is NOT part of the ' +
//                        'public API'
//                url = 'https://github.com/AzureAD/microsoft-authentication-library-common-for-android'
//                developers {
//                    developer {
//                        id = 'microsoft'
//                        name = 'Microsoft'
//                    }
//                }
//                licenses {
//                    license {
//                        name = 'MIT License'
//                    }
//                }
//                inceptionYear = '2021'
//                scm {
//                    url = 'https://github.com/AzureAD/microsoft-authentication-library-common-for-android/tree/master'
//                }
//                properties = [
//                        branch: 'master',
//                        version: project.version
//                ]
//            }
//        }
//    }
//
//    repositories {
//        maven {
//            name "vsts-maven-adal-android"
//            url "https://identitydivision.pkgs.visualstudio.com/_packaging/AndroidADAL/maven/v1"
//            credentials {
//                username project.ext.vstsUsername
//                password project.ext.vstsPassword
//            }
//        }
//    }
//}

def sliceParameter = "" // will be blank unless specified by developer
def dcParameter = "" // will be blank unless specified by developer
def useMockApiForNativeAuthParameter = false // will be false unless specified by developer
def mockApiUrlParameter = "" // will be blank unless specified by developer
def disableAcquireTokenSilentTimeoutParameter = false // will be false unless specified by developer

if (project.hasProperty("slice")) {
    sliceParameter = slice
}

if (project.hasProperty("dc")) {
    dcParameter = dc
}

// This flag is set to false to allow running tests against our mock APIs
// as our mock API is not a 'real' tenant.
if (project.hasProperty("useMockApiForNativeAuth")) {
    useMockApiForNativeAuthParameter = useMockApiForNativeAuth
}

if (project.hasProperty("mockApiUrl")) {
    mockApiUrlParameter = mockApiUrl
}

// By adding -PdisableAcquireTokenSilentTimeout in your dev environment, you will no longer subject to the ATS timeout,
// and your life will be much happier during debugging.
if (project.hasProperty("disableAcquireTokenSilentTimeout")) {
    disableAcquireTokenSilentTimeoutParameter = true
}

sourceSets {
    main {
        java.srcDirs = ['src/main', "$project.buildDir/generated/source/buildConfig/main"]
        buildConfigField("String", "SLICE", "\"$sliceParameter\"")
        buildConfigField("String", "DC", "\"$dcParameter\"")
        buildConfigField("boolean", "USE_MOCK_API_FOR_NATIVE_AUTH_AUTHORITY", "${useMockApiForNativeAuthParameter}")
        buildConfigField("String", "MOCK_API_URL", "\"$mockApiUrlParameter\"")
        buildConfigField("boolean", "DISABLE_ACQUIRE_TOKEN_SILENT_TIMEOUT", "${disableAcquireTokenSilentTimeoutParameter}")
    }
    test {
        java.srcDirs = ['src/test']
    }
}

// This is needed to get Android Studio to resolve test fixtures dependencies
// by default test fixtures dependencies are not resolved in IDE
configurations {
    resolvableTestFixturesImplementation {
        canBeResolved true;
    }
}

configurations.testFixturesImplementation.extendsFrom(configurations.resolvableTestFixturesImplementation);

idea {
    module {
        // This is needed to get Android Studio to resolve test fixtures dependencies
        // by default test fixtures dependencies are not resolved in IDE
        scopes.COMPILE.plus += [configurations.resolvableTestFixturesImplementation]
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.kotlinVersion}"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.kotlinVersion}"

    compileOnly "com.github.spotbugs:spotbugs-annotations:$rootProject.ext.spotBugsAnnotationVersion"
    compileOnly "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    implementation "com.nimbusds:nimbus-jose-jwt:$rootProject.ext.nimbusVersion"
    implementation "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
    implementation "org.json:json:$rootProject.ext.jsonVersion"
    implementation "com.github.stephenc.jcip:jcip-annotations:$rootProject.ext.jcipAnnotationVersion"
    implementation "cz.msebera.android:httpclient:$rootProject.ext.mseberaApacheHttpClientVersion"

    testCompileOnly "com.github.spotbugs:spotbugs-annotations:$rootProject.ext.spotBugsAnnotationVersion"
    testCompileOnly "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoCoreVersion"
    testImplementation "io.mockk:mockk:$rootProject.ext.mockkVersion"
    testImplementation "org.mockito:mockito-inline:$rootProject.ext.mockitoCoreVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$rootProject.ext.mockitoKotlinVersion"

    testFixturesCompileOnly "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
    testFixturesCompileOnly "org.mockito:mockito-core:$rootProject.ext.mockitoCoreVersion"
    testFixturesCompileOnly "org.mockito.kotlin:mockito-kotlin:$rootProject.ext.mockitoKotlinVersion"
    testFixturesCompileOnly "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockVersion"

    testFixturesCompileOnly "com.github.spotbugs:spotbugs-annotations:$rootProject.ext.spotBugsAnnotationVersion"
    testFixturesCompileOnly "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    testFixturesCompileOnly "org.mockito:mockito-inline:$rootProject.ext.mockitoCoreVersion"
    testFixturesAnnotationProcessor "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    
    resolvableTestFixturesImplementation "org.robolectric:junit:$rootProject.ext.robolectricVersion"

    implementation("io.opentelemetry:opentelemetry-api:$rootProject.ext.openTelemetryVersion")
}

//sourceCompatibility = "1.8"
//targetCompatibility = "1.8"

buildConfig {
    // forces the package (of the generated BuildConfig file). Defaults to '${project.group}'
    packageName("com.microsoft.identity.common.java")
    useJavaOutput() // forces the outputType to 'java'
}

afterEvaluate {
//    assemble.dependsOn sourcesJar, javadocJar

    // these tasks are generated by the buildconfig plugin..for more details, read comment about it
    // above in the plugins block.
    compileJava.dependsOn generateBuildConfig, generateTestBuildConfig
}

// This is used to generate the pom file for publishing to external maven in maven-release-jobs.yml
tasks.withType(GenerateMavenPom).all {
    destination = layout.buildDirectory.file("poms/${project.name}-${project.version}.pom").get().asFile
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}