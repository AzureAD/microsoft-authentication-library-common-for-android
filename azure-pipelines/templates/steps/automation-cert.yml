# File: automation-cert.yml

parameters:
- name: envVstsMvnAt
  default: ENV_VSTS_MVN_ANDROIDADACCOUNTS_ACCESSTOKEN

steps:
- task: CmdLine@1
  displayName: Set MVN Access Token in Environment
  inputs:
    filename: echo
    arguments: '##vso[task.setvariable variable=${{ parameters.envVstsMvnAt }}]$(System.AccessToken)'
- task: AzureKeyVault@2
  displayName: 'Azure Key Vault: Download Cert for Automation'
  inputs:
    azureSubscription: 'AuthSdkResourceManager' # string. Workload identity service connection to use managed identity authentication
    KeyVaultName: 'msidlabs' # string. Required. The name of the Key Vault containing the secrets.
    #setting secrets filter to fetch only MSIDLABCertificate cert from the vault
    SecretsFilter: 'LabVaultAccessCert' # string. Required. Specifies the secret to download. Use '*' for all secrets.
    #RunAsPreJob: false # boolean. Make secrets available to whole job. Default: false.
- task: PowerShell@2
  displayName: Install Automation Cert
  inputs:
    targetType: inline
    script: >
      $kvSecretBytes = [System.Convert]::FromBase64String('$(LabVaultAccessCert)')

      $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection

      $certCollection.Import($kvSecretBytes, $null, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)

      $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12)

      $pfxPath = '$(Build.SourcesDirectory)' + "\LabVaultAccessCert.pfx"

      [System.IO.File]::WriteAllBytes($pfxPath, $protectedCertificateBytes)
      
      Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation Cert:\CurrentUser\My
      
      $certPathVar = $pfxPath -replace "\\", "/"

      if([System.IO.File]::Exists($pfxPath)) {
        Write-Host "PFX file created successfully at $certPathVar"
      } else {
        Write-Error "Failed to create PFX file at $certPathVar"
      }    
      
      Write-Host "##vso[task.setvariable variable=LabVaultAppCert]$certPathVar"
- task: AzurePowerShell@5
  displayName: Fetch Native Auth Test Config
  inputs:
    azureSubscription: 'Use Personal Tenant For Test'
    azurePowerShellVersion: 'LatestVersion'
    ScriptType: 'InlineScript'
    Inline: |
        $secretValue = Get-AzKeyVaultSecret -VaultName 'native-auth-secret' -Name 'EmailOTPNoAttributes' -AsPlainText
        
        # Set pipeline variables
        Write-Host "##vso[task.setvariable variable=native_auth_test_config]$secretValue"
    failOnStderr: true
- script: |
    echo "Native Auth Config: $(native_auth_test_config)"
    displayName: 'Print Variables'
